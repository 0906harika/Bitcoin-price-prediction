import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC 
from xgboost import XGBClassifier
from sklearn import metrics 
import warnings
import os
warnings.filterwarnings('ignore')
df=pd.read_csv('/content/bitcoin.csv')
df.head()
df.shape
df.describe()
df.info()
plt.figure(figsize=(15,5))
plt.plot(df['Close'])
plt.title('Bit Coin Close Price',fontsize=15)
plt.ylabel('Price in Dollars')
plt.show()
df[df['Close']==df['Adj Close']].shape,df.shape
df=df.drop(['Adj Close'],axis=1)
df.isnull().sum()
features = ['Open','High','Low','Close']
plt.subplots(figsize=(20,10))
for i,col in enumerate(features):
  plt.subplot(2,2,i+1)
  sns.distplot(df[col])
plt.show()
plt.subplots(figsize=(20,10))
for i,col in enumerate(features):
  plt.subplot(2,2,i+1)
  sns.boxplot(df[col])
plt.show()
# Extract the month from the 'Date' column if it's a datetime object.
# Assume the 'Date' column is in datetime format, otherwise adjust the code accordingly
splitted = df['Date'].str.split('-', expand=True)

df['year'] = splitted[0].astype('int')
df['month'] = splitted[1].astype('int')
df['day'] = splitted[2].astype('int')
# Convert the 'Date' column to datetime objects
df['Date'] = pd.to_datetime(df['Date']) 
df.head()
data_grouped = df.groupby('year').mean()
plt.subplots(figsize=(20,10))
for i, col in enumerate(['Open', 'High', 'Low', 'Close']):
  plt.subplot(2,2,i+1)
  data_grouped[col].plot.bar()
plt.show()
df['is_quarter_end'] = np.where(df['month'] % 3 == 0, 1, 0)
df.head()
df['open-close']=df['Open']-df['Close']
df['high-low']=df['High']-df['Low']
df['target']=np.where(df['Close'].shift(-1) > df['Close'],1,0)
plt.pie(df['target'].value_counts().values,labels=[0,1],autopct='%1.1f%%')
plt.show()
# Before calling sns.heatmap(), select only numerical features for correlation calculation
numerical_features = df.select_dtypes(include=np.number).columns
correlation_matrix = df[numerical_features].corr()

plt.figure(figsize=(10, 10))
sns.heatmap(correlation_matrix > 0.9, annot=True, cbar=False)
plt.show()
features=df[['open-close','high-low','is_quarter_end']]
target=df['target']
scaler=StandardScaler()
features=scaler.fit_transform(features)
x_train,x_test,y_train,y_test=train_test_split(features,target,test_size=0.1,random_state=2022)
print(x_train.shape,x_test.shape)
models=[LogisticRegression(),SVC(kernel='poly',probability=True),XGBClassifier()]
for i in range(3):
  models[i].fit(x_train, y_train)
  print(f'{models[i]} : ')
  print('Training Accuracy : ', metrics.roc_auc_score(y_train, models[i].predict_proba(x_train)[:,1]))
  print('Validation Accuracy : ', metrics.roc_auc_score(y_test, models[i].predict_proba(x_test)[:,1]))
  print()
from sklearn.metrics import ConfusionMatrixDisplay
ConfusionMatrixDisplay.from_estimator(models[0],x_test,y_test)
plt.show()


